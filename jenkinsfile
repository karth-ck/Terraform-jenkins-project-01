pipeline {
    agent any

    environment {
        TF_VAR_aws_region = 'us-east-1'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'UT-789', url: 'https://github.com/karth-ck/Terraform-jenkins-project-01.git'
            }
        }

        stage('Debug Workspace') {
            steps {
                // verify that outputs.tf (and other .tf files) are here
                sh 'ls -1 | grep -E "\\.tf$" || echo "No .tf files found"'
                sh 'grep -R "instance_ip" . || echo "instance_ip output not found"'
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    sh 'terraform plan -out=tfplan -input=false -no-color'
                }
            }
        }

        stage('Terraform Apply') {
            when {
                branch 'main'
            }
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds'
                ]]) {
                    script {
                        // check for a merge commit (parents >1)
                        def parents = sh(
                            script: "git log -1 --pretty=%P | wc -w",
                            returnStdout: true
                        ).trim().toInteger()

                        if (parents > 1) {
                            echo "Merge commit detected on main. Applying Terraform..."
                            sh 'terraform apply -auto-approve tfplan'
                        } else {
                            echo "Not a merge commit on main. Skipping terraform apply."
                        }
                    }
                }
            }
        }

        stage('Show Instance IP') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def ip = sh(
                        script: "terraform output -raw instance_ip || true",
                        returnStdout: true
                    ).trim()

                    if (ip) {
                        echo "Your site is live at: http://${ip}"
                    } else {
                        echo "No instance_ip output foundâ€”apply may have been skipped."
                    }
                }
            }
        }
    }
}
